@model PassItOnAcademy.Models.Payment
@using PassItOnAcademy.Models
@{
    ViewData["Title"] = "Payment Details";
    var badge = Model.Status == PaymentStatus.Paid ? "bg-emerald-100 text-emerald-800"
              : Model.Status == PaymentStatus.Pending ? "bg-amber-100 text-amber-800"
              : Model.Status == PaymentStatus.Failed ? "bg-red-100 text-red-800"
              : "bg-zinc-200 text-zinc-800";

    // Prefer new fields with graceful legacy fallbacks
    string? merchantRef = Model.Reference ?? Model.MerchantReference ?? Model.GatewayPaymentId;
    string? gatewayRef = Model.ProviderReference ?? Model.GatewayPaymentId;
}

<div class="space-y-6">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl md:text-3xl font-extrabold tracking-tight">Payment #@Model.Id</h1>
            <div class="mt-1">
                <span class="rounded-full px-2.5 py-1 text-xs font-semibold @badge">@Model.Status</span>
            </div>
        </div>
        <a asp-action="Index" class="rounded-lg border border-zinc-300 px-3 py-1.5 text-sm hover:bg-zinc-50">Back</a>
    </div>

    <!-- Cards -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Payment summary -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Payment</h2>
            <div class="mt-3 space-y-1 text-sm">
                <div class="text-2xl font-extrabold text-emerald-700">
                    R @Model.Amount.ToString("0.00") <span class="text-zinc-500 text-base">@Model.Currency</span>
                </div>

                <!-- Provider -> Method -->
                <div class="text-zinc-600">Method: @Model.Method</div>

                @if (!string.IsNullOrWhiteSpace(merchantRef))
                {
                    <div class="text-zinc-600">Reference: @merchantRef</div>
                }
                @if (!string.IsNullOrWhiteSpace(gatewayRef))
                {
                    <div class="text-zinc-600">Gateway Ref: @gatewayRef</div>
                }

                <div class="text-zinc-600">Created: @Model.CreatedUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</div>
                @if (Model.PaidUtc.HasValue)
                {
                    <div class="text-zinc-600">Paid: @Model.PaidUtc.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</div>
                }
                <div class="text-zinc-600">Signature: @(Model.SignatureVerified ? "Verified" : "Not verified")</div>

                @if (!string.IsNullOrWhiteSpace(Model.AdminNote))
                {
                    <div class="mt-2 rounded-lg bg-zinc-50 p-2 text-xs text-zinc-700">
                        Admin note: @Model.AdminNote
                    </div>
                }
            </div>
        </div>

        <!-- Booking -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Booking</h2>
            <div class="mt-3 space-y-1 text-sm">
                <div>Booking ID: <span class="font-medium">#@Model.BookingId</span></div>
                <div class="text-zinc-600">Status: @Model.Booking?.Status</div>
                <div class="text-zinc-600">Created: @Model.Booking?.CreatedUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</div>
                <div class="pt-2">
                    <a asp-controller="Bookings" asp-action="Details" asp-route-id="@Model.BookingId"
                       class="inline-flex items-center rounded-lg border border-zinc-300 px-3 py-1.5 text-sm hover:bg-zinc-50">
                        Open Booking
                    </a>
                </div>
            </div>
        </div>

        <!-- Customer & Session -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Customer & Session</h2>
            <div class="mt-3 space-y-1 text-sm">
                <div class="font-medium">@Model.Booking?.User?.FullName  @Model.Booking?.User?.Email</div>
                <div class="text-zinc-600">@Model.Booking?.User?.Email</div>
                <div class="text-zinc-600">@Model.Booking?.User?.PhoneNumber</div>
                <div class="pt-2"></div>
                <div class="font-medium">@Model.Booking?.Session?.Title</div>
                <div class="text-zinc-600">Session ID: @Model.Booking?.SessionId · @Model.Booking?.Session?.Level</div>
                @if (Model.Booking?.Session != null)
                {
                    var when = Model.Booking.Session.StartUtc.ToLocalTime();
                    <div class="text-zinc-600">@when.ToString("yyyy-MM-dd HH:mm") · @Model.Booking.Session.Location</div>
                    <div class="text-zinc-600">Price: R @Model.Booking.Session.Price.ToString("0.00")</div>
                }
            </div>
        </div>
    </div>

    <!-- Raw payload (optional/audit) -->
    @if (!string.IsNullOrWhiteSpace(Model.RawPayload))
    {
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Gateway Payload</h2>
            <pre class="mt-3 overflow-auto rounded-lg bg-zinc-900 p-4 text-xs text-zinc-100">@Model.RawPayload</pre>
        </div>
    }
</div>
