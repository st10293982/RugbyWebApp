@model PassItOnAcademy.Models.Booking
@using PassItOnAcademy.Models
@{
    ViewData["Title"] = "Booking Details";
    var status = Model.Status;
    string Badge() => status == BookingStatus.Booked
        ? "bg-emerald-100 text-emerald-800"
        : status == BookingStatus.Completed
            ? "bg-blue-100 text-blue-800"
            : "bg-zinc-200 text-zinc-800";
}

<div class="space-y-6">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl md:text-3xl font-extrabold tracking-tight">Booking #@Model.Id</h1>
            <div class="mt-1">
                <span class="rounded-full px-2.5 py-1 text-xs font-semibold @Badge()">@Model.Status</span>
            </div>
        </div>
        <a asp-action="Index" class="rounded-lg border border-zinc-300 px-3 py-1.5 text-sm hover:bg-zinc-50">Back</a>
    </div>

    @if (TempData["Msg"] is string msg && !string.IsNullOrWhiteSpace(msg))
    {
        <div class="rounded-xl border border-zinc-200 bg-white p-3 text-sm text-zinc-800 shadow-sm">@msg</div>
    }

    <!-- Panels -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Customer -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Customer</h2>
            <div class="mt-3 space-y-1 text-sm">
                <div class="font-medium">@Model.User?.FullName ?? Model.User?.Email ?? "—"</div>
                <div class="text-zinc-600">@Model.User?.Email</div>
                <div class="text-zinc-600">@Model.User?.PhoneNumber</div>
            </div>
        </div>

        <!-- Session -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Session</h2>
            <div class="mt-3 space-y-1 text-sm">
                <div class="font-medium">@Model.Session?.Title</div>
                <div class="text-zinc-600">ID: @Model.SessionId · @Model.Session?.Level</div>
                @if (Model.Session != null)
                {
                    var local = Model.Session.StartUtc.ToLocalTime();
                    <div class="text-zinc-600">@local.ToString("yyyy-MM-dd HH:mm")</div>
                    <div class="text-zinc-600">Location: @Model.Session.Location</div>
                    <div class="text-zinc-600">Price: R @Model.Session.Price.ToString("0.00")</div>
                }
            </div>
        </div>

        <!-- Payments -->
        <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
            <h2 class="text-sm font-semibold">Payments</h2>
            <div class="mt-3 space-y-2 text-sm">
                @if (Model.Payments != null && Model.Payments.Any())
                {
                    foreach (var p in Model.Payments.OrderByDescending(x => x.CreatedUtc))
                    {
                        var badge = p.Status == PaymentStatus.Paid ? "bg-emerald-100 text-emerald-800"
                        : p.Status == PaymentStatus.Pending ? "bg-amber-100 text-amber-800"
                        : p.Status == PaymentStatus.Failed ? "bg-red-100 text-red-800"
                        : "bg-zinc-200 text-zinc-800";
                        <div class="rounded-xl border border-zinc-200 p-3">
                            <div class="flex items-center justify-between">
                                <div>R @p.Amount.ToString("0.00")</div>
                                <span class="rounded-full px-2.5 py-1 text-xs font-semibold @badge">@p.Status</span>
                            </div>
                            <div class="mt-1 text-xs text-zinc-600">
                                @p.CreatedUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-zinc-600">No payments yet.</div>
                }
            </div>
        </div>
    </div>

    <!-- Actions -->
    <div class="rounded-2xl border border-zinc-200 bg-white p-6 shadow-sm">
        <h2 class="text-sm font-semibold">Actions</h2>
        <div class="mt-3 flex flex-wrap items-center gap-3">
            <a asp-action="Move" asp-route-id="@Model.Id"
               class="rounded-lg border border-zinc-300 px-3 py-1.5 text-sm hover:bg-zinc-50">
                Move to another session
            </a>

            @if (Model.Status == BookingStatus.Booked)
            {
                <form asp-action="Complete" asp-route-id="@Model.Id" method="post" class="inline">
                    @Html.AntiForgeryToken()
                    <button type="submit"
                            class="rounded-lg bg-black px-3 py-1.5 text-sm font-semibold text-white hover:bg-zinc-900">
                        Mark completed
                    </button>
                </form>

                <form asp-action="Cancel" asp-route-id="@Model.Id" method="post" class="inline"
                      onsubmit="return confirm('Cancel this booking? This will notify the customer.');">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="reason" value="Admin action" />
                    <button type="submit"
                            class="rounded-lg border border-red-300 bg-red-50 px-3 py-1.5 text-sm text-red-700 hover:bg-red-100">
                        Cancel booking
                    </button>
                </form>
            }
        </div>

        <div class="mt-4 text-xs text-zinc-500">
            Created: @Model.CreatedUtc.ToLocalTime().ToString("yyyy-MM-dd HH:mm")
        </div>
    </div>
</div>
