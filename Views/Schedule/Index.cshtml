@model PassItOnAcademy.ViewModels.ScheduleIndexVM
@{
    ViewData["Title"] = "Schedule";

    // Base route values as nullable strings:
    var baseRouteNullable = new Dictionary<string, string?>
    {
        ["from"] = Model?.Filters?.From?.ToString("yyyy-MM-dd"),
        ["to"] = Model?.Filters?.To?.ToString("yyyy-MM-dd"),
        ["level"] = Model?.Filters?.Level,
        ["programId"] = Model?.Filters?.ProgramId?.ToString(),
        ["q"] = Model?.Filters?.Q
    };

    // Helper to convert to IDictionary<string,string> and drop null/empty values
    IDictionary<string, string> Clean(IDictionary<string, string?> src)
        => src.Where(kv => !string.IsNullOrWhiteSpace(kv.Value))
              .ToDictionary(kv => kv.Key, kv => kv.Value!);
}

@section FullWidthTop
{
    <style>
        /* Card shell */
        .p-card {
            position: relative;
            border-radius: 20px;
            background: linear-gradient(170deg, rgba(58,56,56,.62) 0%, rgb(31,31,31) 100%);
            box-shadow: 0 25px 50px rgba(0,0,0,.55);
            transition: transform .3s ease, box-shadow .3s ease, border-color .3s ease;
            cursor: default;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

            .p-card:hover {
                transform: translateY(-3px) scale(.995);
            }

        /* Top-left ribbon */
        .p-ribbon {
            position: absolute;
            overflow: hidden;
            width: 150px;
            height: 150px;
            top: -10px;
            left: -10px;
            display: flex;
            align-items: center;
            justify-content: center;
            pointer-events: none;
        }

            .p-ribbon::before {
                content: attr(data-text);
                position: absolute;
                width: 150%;
                height: 40px;
                background-image: linear-gradient(45deg, #ff6547 0%, #ffb144 51%, #ff7053 100%);
                transform: rotate(-45deg) translateY(-20px);
                display: flex;
                align-items: center;
                justify-content: center;
                color: #fff;
                font-weight: 700;
                letter-spacing: .08em;
                text-transform: uppercase;
                box-shadow: 0 5px 10px rgba(0,0,0,.23);
                font-size: 12px;
            }

            .p-ribbon::after {
                content: "";
                position: absolute;
                width: 10px;
                height: 10px;
                bottom: 0;
                left: 0;
                z-index: -1;
                box-shadow: 140px -140px #cc3f47;
                background-image: linear-gradient(45deg, #FF512F 0%, #F09819 51%, #FF512F 100%);
            }

        /* Media well — full image, no crop */
        .p-media {
            height: 13.5rem;
            background: #111;
            display: grid;
            place-items: center;
            border-bottom: 1px solid rgba(255,255,255,.06);
        }

            .p-media img {
                max-width: 100%;
                max-height: 100%;
                object-fit: contain;
                display: block;
            }

        /* Body min-height for aligned footers */
        .p-body {
            min-height: 8.75rem;
        }

        /* Accent */
        .p-accent {
            position: absolute;
            left: 0;
            right: 0;
            bottom: 0;
            height: 3px;
            opacity: 0;
            background: linear-gradient(90deg, #34d399, #22d3ee, #f59e0b);
            transition: opacity .35s ease;
        }

        .p-card:hover .p-accent {
            opacity: 1;
        }

        /* Level chip */
        .p-chip {
            position: absolute;
            left: .75rem;
            top: .75rem;
            padding: .15rem .45rem;
            font-size: 10px;
            font-weight: 700;
            color: #fff;
            background: rgba(0,0,0,.85);
            border-radius: 9999px;
        }

        /* ===== ONLY CHANGE YOU ASKED FOR: make all text in the card body bold ===== */
        .p-body, .p-body * {
            font-weight: 700 !important;
        }

        .p-media .p-chip {
            font-weight: 800 !important;
        }
        /* ======================================================================= */
    </style>
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
    <div class="flex items-end justify-between gap-4">
        <div>
            <h1 class="text-2xl md:text-3xl font-extrabold tracking-tight">Find a session</h1>
            <p class="text-sm text-zinc-500 mt-1">Filter by date, level or program and book your spot.</p>
        </div>
        <a asp-controller="Home" asp-action="Programs"
           class="hidden md:inline-flex items-center rounded-lg border border-zinc-300 px-3 py-1.5 text-sm hover:bg-zinc-50">Programs & Prices</a>
    </div>

    <!-- Filters -->
    <form method="get" class="mt-6 rounded-2xl border border-zinc-200 bg-white p-4 md:p-5 shadow-sm">
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-6 gap-3">
            <div>
                <label class="block text-xs font-medium text-zinc-600">From</label>
                <input type="date" name="from"
                       value="@(Model.Filters.From?.ToString("yyyy-MM-dd"))"
                       class="mt-1 block w-full rounded-lg border-zinc-300 text-sm focus:border-black focus:ring-black" />
            </div>
            <div>
                <label class="block text-xs font-medium text-zinc-600">To</label>
                <input type="date" name="to"
                       value="@(Model.Filters.To?.ToString("yyyy-MM-dd"))"
                       class="mt-1 block w-full rounded-lg border-zinc-300 text-sm focus:border-black focus:ring-black" />
            </div>
            <div>
                <label class="block text-xs font-medium text-zinc-600">Level</label>
                <select name="level" class="mt-1 block w-full rounded-lg border-zinc-300 text-sm focus:border-black focus:ring-black">
                    <option value="">All</option>
                    @if (Model.Filters.LevelOptions != null)
                    {
                        foreach (var opt in Model.Filters.LevelOptions)
                        {
                            <option value="@opt.Value" selected="@(opt.Value == Model.Filters.Level ? "selected" : null)">@opt.Text</option>
                        }
                    }
                </select>
            </div>
            <div>
                <label class="block text-xs font-medium text-zinc-600">Program</label>
                <select name="programId" class="mt-1 block w-full rounded-lg border-zinc-300 text-sm focus:border-black focus:ring-black">
                    <option value="">All</option>
                    @if (Model.Filters.ProgramOptions != null)
                    {
                        foreach (var opt in Model.Filters.ProgramOptions)
                        {
                            <option value="@opt.Value" selected="@(opt.Value == Model.Filters.ProgramId?.ToString() ? "selected" : null)">@opt.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="sm:col-span-2 lg:col-span-2">
                <label class="block text-xs font-medium text-zinc-600">Search</label>
                <input type="text" name="q" placeholder="Title, keyword…"
                       value="@Model.Filters.Q"
                       class="mt-1 block w-full rounded-lg border-zinc-300 text-sm focus:border-black focus:ring-black" />
            </div>
        </div>

        <div class="mt-4 flex items-center gap-3">
            <button type="submit"
                    class="inline-flex items-center rounded-xl bg-[#FFD200] px-4 py-2 text-sm font-semibold text-black hover:brightness-95">
                Apply filters
            </button>
            <a asp-action="Index" class="text-sm text-zinc-600 underline">Reset</a>
        </div>
    </form>

    <!-- Results -->
    @if (Model.Items.Any())
    {
        <!-- Equal-height cards: fixed media + min body + fixed footer -->
        <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 auto-rows-fr">
            @foreach (var s in Model.Items)
            {
                <article class="p-card">
                    <!-- ribbon shows Level (or All) like “Premium” -->
                    <span class="p-ribbon" data-text="@(string.IsNullOrWhiteSpace(s.Level) ? "All" : s.Level)"></span>

                    <!-- Media well (full image, not cropped) -->
                    <div class="p-media">
                        @if (!string.IsNullOrWhiteSpace(s.ImageUrl))
                        {
                            <img src="@s.ImageUrl"
                                 alt="@(string.IsNullOrWhiteSpace(s.ImageAlt) ? s.Title : s.ImageAlt)" />
                        }
                        else
                        {
                            <div class="text-zinc-400 text-xs">No image</div>
                        }
                        <div class="p-chip">@(string.IsNullOrWhiteSpace(s.Level) ? "All levels" : s.Level)</div>
                    </div>

                    <!-- Body (consistent min height) -->
                    <div class="p-body px-5 pt-4 pb-2 text-zinc-100/90">
                        <div class="text-[11px] uppercase tracking-wide text-zinc-300">
                            @s.StartLocal.ToString("ddd, dd MMM yyyy • HH:mm")
                        </div>

                        <h3 class="mt-1 text-white font-semibold">@s.Title</h3>

                        @if (!string.IsNullOrWhiteSpace(s.ProgramName))
                        {
                            <div class="mt-0.5 text-[12px] text-zinc-300">@s.ProgramName</div>
                        }

                        @if (!string.IsNullOrWhiteSpace(s.Location))
                        {
                            <div class="mt-2 text-sm text-zinc-200">@s.Location</div>
                        }

                        <div class="mt-3 flex items-center justify-between text-sm">
                            <div>Price: <span class="font-semibold text-white">R @s.Price.ToString("0.00")</span></div>
                            <div class="text-zinc-300">Spots left: <span class="font-semibold text-white">@s.SpotsLeft</span></div>
                        </div>
                    </div>

                    <!-- Footer (fixed position area) -->
                    <div class="px-5 pb-5 pt-3 flex items-center gap-2">
                        <a asp-action="Details" asp-route-id="@s.Id"
                           class="inline-flex items-center rounded-xl border border-white/30 px-3 py-1.5 text-sm text-white hover:bg-white/10">
                            Details
                        </a>

                        <a asp-controller="CustomerBookings" asp-action="Create" asp-route-id="@s.Id"
                           class="inline-flex items-center rounded-xl bg-[#FFD200] px-3 py-1.5 text-sm font-semibold text-black hover:brightness-95 @(s.SpotsLeft <= 0 ? "pointer-events-none opacity-50" : "")">
                            Book
                        </a>
                    </div>

                    <div class="p-accent"></div>
                </article>
            }
        </div>

        <!-- Pagination -->
        @if (Model.Pagination.TotalPages > 1)
        {
            <div class="mt-8 flex items-center justify-between">
                <div class="text-sm text-zinc-600">
                    Page <span class="font-semibold">@Model.Pagination.Page</span>
                    of <span class="font-semibold">@Model.Pagination.TotalPages</span>
                </div>

                <div class="flex items-center gap-2">
                    @{
                        var prev = Math.Max(1, Model.Pagination.Page - 1);
                        var next = Math.Min(Model.Pagination.TotalPages, Model.Pagination.Page + 1);

                        var prevDictNullable = new Dictionary<string, string?>(baseRouteNullable) { ["page"] = prev.ToString() };
                        var nextDictNullable = new Dictionary<string, string?>(baseRouteNullable) { ["page"] = next.ToString() };

                        var prevRoute = Clean(prevDictNullable);
                        var nextRoute = Clean(nextDictNullable);
                    }

                    <a asp-action="Index" asp-all-route-data="prevRoute"
                       class="rounded-lg border px-3 py-1.5 text-sm @(Model.Pagination.Page == 1 ? "pointer-events-none opacity-40" : "hover:bg-zinc-50")">
                        Prev
                    </a>

                    <a asp-action="Index" asp-all-route-data="nextRoute"
                       class="rounded-lg border px-3 py-1.5 text-sm @(Model.Pagination.Page == Model.Pagination.TotalPages ? "pointer-events-none opacity-40" : "hover:bg-zinc-50")">
                        Next
                    </a>
                </div>
            </div>
        }
    }
    else
    {
        <div class="mt-8 rounded-2xl border border-dashed border-zinc-300 bg-zinc-50 p-8 text-center">
            <div class="text-lg font-semibold">No sessions found</div>
            <p class="mt-1 text-sm text-zinc-600">Try adjusting your filters or check back soon.</p>
            <a asp-action="Index" class="mt-4 inline-flex items-center rounded-xl bg-black px-4 py-2 text-sm font-semibold text-white hover:bg-black/90">
                Clear filters
            </a>
        </div>
    }
</div>
