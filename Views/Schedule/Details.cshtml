@model PassItOnAcademy.ViewModels.SessionDetailsVM
@{
    ViewData["Title"] = Model.Title;
}

@section FullWidthTop {
    <style>
        /* ====== Motion + polish (no external libs) ====== */

        /* Timing helpers */
        :root {
            --ease-soft: cubic-bezier(.22,.61,.36,1);
            --brand: #FFD200;
        }

        /* Fade / slide reveals */
        @@keyframes fadeUp {
            from

        {
            opacity: 0;
            transform: translateY(14px)
        }

        to {
            opacity: 1;
            transform: none
        }

        }
        @@keyframes fadeIn {
            from

        {
            opacity: 0
        }

        to {
            opacity: 1
        }

        }
        @@keyframes pop {
            0%

        {
            transform: scale(.96)
        }

        100% {
            transform: scale(1)
        }

        }

        /* Hero image slow Ken-Burns */
        @@keyframes kenburns {
            0%

        {
            transform: scale(1) translateY(0)
        }

        100% {
            transform: scale(1.06) translateY(-1.5%)
        }

        }

        /* Button micro-interactions */
        .btn-brand {
            background: var(--brand);
            color: #111;
            font-weight: 700;
            transition: filter .2s var(--ease-soft), transform .2s var(--ease-soft), box-shadow .2s var(--ease-soft);
            box-shadow: 0 8px 22px rgba(0,0,0,.10);
        }

            .btn-brand:hover {
                filter: brightness(.95);
                transform: translateY(-1px)
            }

            .btn-brand:active {
                transform: translateY(0) scale(.99)
            }

        .btn-ghost {
            border: 1px solid rgb(228 228 231/.9);
            transition: background .2s var(--ease-soft), transform .2s var(--ease-soft);
        }

            .btn-ghost:hover {
                background: rgb(244 244 245/.6);
                transform: translateY(-1px)
            }

        /* Glass panel */
        .glass {
            background: linear-gradient( to bottom, rgba(255,255,255,.22), rgba(255,255,255,.08) );
            border: 1px solid rgba(255,255,255,.25);
            -webkit-backdrop-filter: blur(8px);
            backdrop-filter: blur(8px);
            border-radius: 16px;
        }

        /* Gradient hairline */
        .gbar {
            height: 2px;
            background: linear-gradient(90deg,#34d399,#22d3ee,#f59e0b);
            opacity: .8;
        }

        /* Info chips */
        .chip {
            background: rgba(0,0,0,.7);
            color: #fff;
            border-radius: 9999px;
            padding: 2px 8px;
            font-size: 11px;
            font-weight: 700;
        }

        /* Icon (SVG) styling */
        .ico {
            width: 16px;
            height: 16px;
            margin-right: 8px;
            opacity: .9
        }

        /* Reveal-on-scroll (with tiny script below) */
        .reveal {
            opacity: 0;
            transform: translateY(12px);
            transition: opacity .6s var(--ease-soft), transform .6s var(--ease-soft)
        }

            .reveal.is-visible {
                opacity: 1;
                transform: none
            }

        /* Hero */
        .hero-wrap {
            position: relative;
            overflow: hidden
        }

        .hero-img {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            will-change: transform;
            animation: kenburns 14s ease-out forwards;
            transform-origin: center 60%;
            filter: saturate(1.02);
        }

        .hero-scrim {
            position: absolute;
            inset: 0;
            background: linear-gradient(to top, rgba(0,0,0,.72), rgba(0,0,0,.25) 45%, transparent 85%)
        }

        /* Side card sticky polish */
        .sticky-card {
            box-shadow: 0 10px 30px rgba(0,0,0,.08);
            animation: pop .45s var(--ease-soft) both;
        }

        /* Section cards */
        .card {
            border: 1px solid rgb(228 228 231/.9);
            border-radius: 16px;
            box-shadow: 0 6px 18px rgba(0,0,0,.05);
        }
    </style>
}

<!-- HERO -->
<section class="hero-wrap w-full h-[56vh] md:h-[62vh] lg:h-[68vh]">
    @if (!string.IsNullOrWhiteSpace(Model.ImageUrl))
    {
        <img src="@Model.ImageUrl" alt="@(string.IsNullOrWhiteSpace(Model.ImageAlt) ? Model.Title : Model.ImageAlt)" class="hero-img" />
    }
    else
    {
        <div class="absolute inset-0 grid place-items-center text-zinc-400 text-sm bg-zinc-100">No image</div>
    }
    <div class="hero-scrim"></div>

    <!-- Bottom content -->
    <div class="absolute inset-x-0 bottom-0 pb-6 md:pb-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="glass p-4 md:p-5 reveal" style="animation: fadeUp .7s var(--ease-soft) both .1s">
                <div class="flex items-center gap-2 text-white/90">
                    <span class="chip">@(string.IsNullOrWhiteSpace(Model.Level) ? "All levels" : Model.Level)</span>
                    @if (!string.IsNullOrWhiteSpace(Model.ProgramName))
                    {
                        <span class="chip bg-white/20 !font-semibold">@Model.ProgramName</span>
                    }
                </div>

                <h1 class="mt-2 text-white text-2xl md:text-4xl font-extrabold">@Model.Title</h1>
                <div class="mt-1 text-zinc-200 text-sm md:text-base">
                    @Model.StartLocal.ToString("ddd, dd MMM yyyy • HH:mm") — @Model.EndLocal.ToString("HH:mm")
                </div>

                <div class="mt-3 gbar"></div>
            </div>
        </div>
    </div>
</section>

<!-- MAIN -->
<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-10">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- LEFT -->
        <div class="lg:col-span-2 space-y-6">
            @if (!string.IsNullOrWhiteSpace(Model.ProgramDescription))
            {
                <section class="card bg-white p-6 reveal">
                    <h2 class="text-lg font-bold">About this program</h2>
                    <p class="mt-2 text-sm text-zinc-700 whitespace-pre-line leading-relaxed">@Model.ProgramDescription</p>
                </section>
            }

            <section class="card bg-white p-6 reveal">
                <h2 class="text-lg font-bold">Session details</h2>

                <dl class="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-5 text-sm">
                    <div class="flex items-start">
                        <svg class="ico" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M8 2v4M16 2v4M3 10h18M4 7h16a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1z" /></svg>
                        <div>
                            <dt class="text-zinc-500">When</dt>
                            <dd class="font-semibold">@Model.StartLocal.ToString("dddd, dd MMM yyyy")</dd>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <svg class="ico" viewBox="0 0 24 24" fill="none" stroke="currentColor"><circle cx="12" cy="12" r="10" /><path d="M12 6v6l4 2" /></svg>
                        <div>
                            <dt class="text-zinc-500">Time</dt>
                            <dd class="font-semibold">@Model.StartLocal.ToString("HH:mm") – @Model.EndLocal.ToString("HH:mm")</dd>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <svg class="ico" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M4 19V5a2 2 0 0 1 2-2h8l6 6v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z" /><path d="M14 3v6h6" /></svg>
                        <div>
                            <dt class="text-zinc-500">Level</dt>
                            <dd class="font-semibold">@(string.IsNullOrWhiteSpace(Model.Level) ? "All levels" : Model.Level)</dd>
                        </div>
                    </div>

                    <div class="flex items-start">
                        <svg class="ico" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" /><circle cx="12" cy="7" r="4" /></svg>
                        <div>
                            <dt class="text-zinc-500">Coach</dt>
                            <dd class="font-semibold">@(!string.IsNullOrWhiteSpace(Model.CoachName) ? Model.CoachName : "TBA")</dd>
                        </div>
                    </div>

                    <div class="sm:col-span-2 flex items-start">
                        <svg class="ico" viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M21 10c0 6-9 12-9 12S3 16 3 10a9 9 0 1 1 18 0z" /><circle cx="12" cy="10" r="3" /></svg>
                        <div>
                            <dt class="text-zinc-500">Location</dt>
                            <dd class="font-semibold">@(!string.IsNullOrWhiteSpace(Model.Location) ? Model.Location : "To be confirmed")</dd>
                        </div>
                    </div>
                </dl>
            </section>
        </div>

        <!-- RIGHT (sticky) -->
        <aside class="lg:col-span-1">
            <div class="sticky top-24 bg-white p-6 rounded-2xl border border-zinc-200 sticky-card reveal">
                <div class="text-sm text-zinc-500">Price</div>
                <div class="mt-0.5 text-3xl font-extrabold">R @Model.Price.ToString("0.00")</div>

                <div class="mt-4 text-sm text-zinc-600 space-y-1">
                    <div>Capacity: <span class="font-semibold">@Model.Capacity</span></div>
                    <div>Booked: <span class="font-semibold">@Model.Booked</span></div>
                    <div>Spots left: <span class="font-semibold">@Math.Max(0, Model.Capacity - Model.Booked)</span></div>
                </div>

                <div class="mt-6 flex flex-col gap-2">
                    <a asp-controller="CustomerBookings" asp-action="Create" asp-route-id="@Model.Id"
                       class="btn-brand inline-flex items-center justify-center rounded-xl px-4 py-2.5 text-sm">
                        Book now
                    </a>
                    <a asp-controller="Schedule" asp-action="Index"
                       class="btn-ghost inline-flex items-center justify-center rounded-xl px-4 py-2.5 text-sm">
                        Back to schedule
                    </a>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.ProgramName))
                {
                    <div class="mt-6 rounded-lg bg-zinc-50 p-3 text-xs text-zinc-600">
                        Part of <span class="font-semibold">@Model.ProgramName</span>
                    </div>
                }
            </div>
        </aside>
    </div>
</div>

@section Scripts {
    <script>
        // tiny, safe reveal-on-scroll
        const els=[...document.querySelectorAll('.reveal')];
        const io=new IntersectionObserver(es=>{
            es.forEach(e=>{
                if(e.isIntersecting){ e.target.classList.add('is-visible'); io.unobserve(e.target); }
            });
        },{threshold:.12});
        els.forEach(el=>io.observe(el));
    </script>
}
